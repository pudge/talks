MacPerl and the Elements of the Wild
yet another perl conference
June 24, 1999
Chris Nandor, mailto:pudge@pobox.com, http://pudge.net/

Who I Am
    * Chris Nandor
        mailto:pudge@pobox.com
        http://pudge.net/macperl/
    * Programmer / "webmaster", petersons.com
        http://www.petersons.com/
    * Co-Author, MacPerl: Power and Ease
        http://www.macperl.com/ptf_book/
    * Columnist for The Perl Journal, "Perl News"
        http://www.perl.org/news.html
    * Other stuff: Perl News online, CPAN Testers,
        MacPerl Module Porters, comp.lang.perl.moderated
        newsgroup, Boston Perl Mongers, etc.

Hmm ... @the_wild[0 .. $#the_wild] ?
    * Mac OS is kinda foreign to Perl, and visey-versy
    * IPC is not foreign to Mac OS, but not "native", either

MacPerl: The Application
    * Standalone application, with windows and everything
    * Can only process one program at a time
    * Intgrated text editor and online help *
    * C<STDIN>, C<STDERR>, C<STDOUT> via console window by default *

MacPerl: The Application (cont.)
    * Programs can be executed in application, from Finder,
        or via Apple events from any other process *
    * Apple events allow use of other IDEs for use with MacPerl *
    * Runtimes and droplets and CGIs, oh my! *
    * perl "shell" tool available, too *

The Mac OS Toolbox
    * We Like GUIs *
    * More than just the GUI: IAC, gestalt, files, whatever

Interapplication Communication (IAC)
    * What Mac OS calls IPC
    * Apple events are a type of Mac OS IAC
    * Mac programs don't, generally, have C<STDIN>, C<STDOUT>, C<STDERR>
    * Apple events correspond to what users can do with the program's GUI,
        and objects and data that the program has access to
    * AppleScript is a language designed specifically
        for Apple events
    * Apple events can be sent and received from many
        languages, not just AppleScript

Perl vs. AppleScript
    * MacPerl usually executes more quickly, though AppleScripts can
        be precompiled
    * If you know Perl, Perl development is
        mostly faster and easier.  If not, AppleScript may
        be faster and easier.  In any case, developing scripts
        with Apple events is faster and easier in AppleScript ... or is it?
    * Embed AppleScript with C<MacPerl::DoAppleScript>
        built-in function*
    * Embed Perl in AppleScript with MacPerl's C<Do Script> event*

Why I Don't Like AppleScript
    * Try this on for size: <PRE>
    tell application "FileMaker Pro"
        set mycells to get the second cell &not;
            of (the records whose eighth cell contains "bill") &not;
            of database "Check Tracker"
    end tell

    * Enough said, perhaps?

A Look at Apple Events
    * Apple events are binary data, but they have text representations, too.
        The previous AppleScript builds an event that looks like this
        (NB: quote marks below should be Mac OS curly quotes): <PRE>
    core/getd:'----':obj {
        form:indx, want:type(ccel), seld:long(2), from:obj {
            form:test, want:type(crow), from:obj {
                form:name, want:type(cDB ), seld:"Check Tracker", from:'null'()
            },
            seld:cmpd{
                relo:cont,
                'obj1':obj {form:indx, want:type(ccel), seld:long(8), from:'exmn'()}, 
                'obj2':"bill"
            }
        }
    }


    * Most any Mac language can create and send this event, including C,
        Pascal, C++, and Perl.  Wanna see it in Perl?

Well, Here It Is, Regardless
    * <PRE>
    use Mac::AppleEvents;

    my $string = &lt;&lt;EOT;
    '----':obj {
        form:indx, want:type(ccel), seld:long(2), from:obj {
            form:test, want:type(crow), from:obj {
                form:name, want:type(cDB ), seld:"Check Tracker", from:'null'()
            },
            seld:cmpd{
                relo:cont,
                'obj1':obj {form:indx, want:type(ccel), seld:long(8), from:'exmn'()}, 
                'obj2':"bill"
            }
        }
    }
    EOT

    my $evt = AEBuildAppleEvent('core', 'getd', typeApplSignature,
        'FMP3', kAutoGenerateReturnID, kAnyTransactionID, $string) or die $^E;
    my $rep = AESend($evt, kAEWaitReply) or die $^E;
    my $desc = AEGetParamDesc($rep, keyDirectObject) or die $^E;
    my @data;

    if ($desc-&gt;type eq typeAEList) {
        foreach (1 .. AECountItems($desc)) {
            my $data = AEGetNthDesc($desc, $_) or die $^E;
            push @data, $data-&gt;get;
            AEDisposeDesc $data or die $^E;
        }
    } else {
        push @data, $desc-&gt;get;
    }

    AEDisposeDesc $evt or die $^E;
    AEDisposeDesc $rep or die $^E;
    AEDisposeDesc $desc or die $^E;


OK, Let's Try That Again
    * Take a deep breath, it gets better: <PRE>
    use Mac::Glue ':glue';
    my $fmp = new Mac::Glue 'FileMaker Pro';
    my @cells = $fmp-&gt;get(
        $fmp-&gt;obj(
            cell =&gt; 2,
            records =&gt; whose(cell =&gt; 8 =&gt; contains =&gt; 'bill'),
            database =&gt; 'Check Tracker'
        )
    );
    die $^E if $^E;

    * But how did we get from there to here?

I'm Glad You Asked
    * An application that can be controlled via Apple events
        is called <EM>scriptable</EM>
    * Most Mac files have a resource fork, and scriptable
        applications have an C<aete> resource, containing
        all the Apple event interface data for that application
    * Included data are "human" names for events and classes,
        what parameters and properties events and classes
        have (and their "human" names), etc.
    * Drop an application on "gluemac" droplet to create glue
        -- and documentation -- for that application
    * Then just start scripting it

Using Mac::Glue
    * Call C<new> constructor with name of glue
    * Apple events are called as object methods
    * Event parameters are passed as key-value pairs,
        though direct object parameter if first in list
        doesn't need key
    * Results returned from call, error put into C<$^E>
    * Example: <PRE>
    #!perl -wl
    use Mac::Glue;
    $sherlock = new Mac::Glue 'Sherlock';
    $sherlock-&gt;activate;
    @urls = $sherlock-&gt;search_internet('AltaVista', For =&gt; 'yapc');
    die $^E if $^E;
    $sherlock-&gt;quit;
    print join "\n", sort @urls;

More Cool Stuff
    * Mac::Glue automatically guesses (with help from info
        in the C<aete> resource) what data types
        elements should be: aliases converted to alias
        data with C<Mac::Files::NewAliasMinimal>, booleans
        converted, etc. <PRE>
    @files = $sherlock-&gt;search('Bird:', For =&gt; 'MacOS');

    * Mac::Glue recursively converts arrays
        and hashes to AE lists and records (and on output,
        lists and records to arrays and hashes) <PRE>
    $glue-&gt;make(new =&gt; window =&gt; with_properties =&gt;
        {name =&gt; 'Window', position =&gt; [100, 300]}
    );

Object Specifier Records
    * This is where Apple events get messy
    * An AE object consists of four parts: class,
        container, data form, and data (and type).
    * In Mac::Glue, order determines containers,
        class and data are specified, and data form and type
        are guessed (or can be stated explicitly)
    * Example: <PRE>
    $folder = $finder-&gt;obj( file =&gt; 'Foo', folder =&gt; 'Bar', disk =&gt; 2 );
    $finder-&gt;open($folder);

    * "disk" object contains "folder" object which contains "file" object
    *  Data for "folder" and "file" objects are type C<typeChar> and form
        C<formName>, since they are text.  Data for "disk" is type
        C<typeInteger> and form C<formAbsoluteIndex>.  The C<obj_form> function
        allows specifying other forms and types.

Play With Me
    * Just reaching first beta (been in alpha for about 9 months)
    * Needs people to try to break it
    * <A HREF="http://pudge.net/macperl/">http://pudge.net/macperl/</A>
        has documentation and links to latest release
    * <A HREF="http://www.macperl.org/">http://www.macperl.org/</A> has
        two mailing lists, macperl and macperl-modules, that have discussions
        on Mac::Glue (the latter for more in-depth discussions)
